// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item;
using Peppol.Ademico.Kiota.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications
{
    /// <summary>
    /// Builds and executes requests for operations under \api\peppol\v1\notifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NotificationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.notifications.item collection</summary>
        /// <param name="position">The id of the notification we want to consume</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder"/></returns>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("notificationId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.notifications.item collection</summary>
        /// <param name="position">The id of the notification we want to consume</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("notificationId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.Item.WithNotificationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/notifications{?documentId*,endDateTime*,eventType*,page*,pageSize*,peppolDocumentType*,receiver*,sender*,startDateTime*,transmissionId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/notifications{?documentId*,endDateTime*,eventType*,page*,pageSize*,peppolDocumentType*,receiver*,sender*,startDateTime*,transmissionId*}", rawUrl)
        {
        }
        /// <summary>
        /// The API creates notifications to inform you when a document was sent successfully or when you receive a document from other legal entities.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are sending an invoice/credit note to a Buyer. You will get notified via the notification `InvoiceSendingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QUEUED&lt;/td&gt;&lt;td&gt;Waiting to be sent to the Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SENT&lt;/td&gt;&lt;td&gt;Acknowledged by the receiver Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SEND_FAILED&lt;/td&gt;&lt;td&gt;Failed to send to the receiver&apos;s Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, have sent an invoice/credit note to the Access Point of the Buyer and it was received. You will get notified via the notification `MLRReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TECHNICAL_ACCEPTANCE&lt;/td&gt;&lt;td&gt;Document received and accepted by the Access Point of the Buyer, but it was not (yet) read by Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;MLR reject. Status is used when the Access Point of the Buyer will not process the referenced document any further due to validation errors.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;When you, acting as a Buyer, are receiving an invoice/credit note from the Seller you will get notified via the notification `InvoiceReceivingNotificationRO`. This notification contains a unique identifier called `transmissionId` which you will use to get the incoming invoice/credit note using the endpoint &lt;a href=&quot;#tag/InvoiceCredit-Note/operation/getInvoiceInUBLFormat&quot;&gt;Get Invoice/Credit Note&lt;/a&gt;.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are receiving an InvoiceResponse notification(IR) from the Buyer. Not all Buyers are sending an InvoiceResponse.You will get notified via the notification `InvoiceResponseReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BUYER_ACKNOWLEDGE&lt;/td&gt;&lt;td&gt;Status is used when Buyer has received a readable invoice message that can be understood and submitted for processing by the Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IN_PROCESS&lt;/td&gt;&lt;td&gt;Status is used when the processing of the Invoice has started in Buyers system.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UNDER_QUERY&lt;/td&gt;&lt;td&gt;Status is used when Buyer will not proceed to accept the Invoice without receiving additional information from the Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CONDITIONALLY_ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used when Buyer is accepting the Invoice under conditions stated in &apos;Status Reason&apos; and proceed to pay accordingly unless disputed by Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;Invoice reject. Status is used only when the Buyer will not process the referenced Invoice any further. Buyer is rejecting this invoice but not necessarily the commercial transaction. Although it can be used also for rejection for commercial reasons (invoice not corresponding to delivery).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has given a final approval of the invoice and the next step is payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PARTIALLY_PAID&lt;/td&gt;&lt;td&gt;Status is used together with Clarification Reason code PPD, only when the Buyer has initiated the payment of the invoice without having paid the accepted amount in full.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FULLY_PAID&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has initiated the payment of the invoice.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;Here is a list of all notifications defined in our OpenAPI specifications that you can receive:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Event Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer. This notifies you whether the invoice was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, receive an invoice/credit note from a Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MLRReceivingNotificationRO&lt;/td&gt;&lt;td&gt;MLR_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, have sent an invoice/credit note to the Buyer&apos;s Access Point and it has been received. This notifies you whether the Buyer&apos;s Access Point has accepted or rejected the invoice for technical reasons.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseSendingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_SENT&lt;/br&gt;INVOICE_RESPONSE_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an Invoice Response (IR) to a Seller. This notifies you whether the Invoice Response was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseReceivingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an Invoice Response (IR) from a Buyer. This notifies you whether the invoice you sent to the Buyer was accepted, rejected, paid, etc.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an order to a Seller. This notifies you whether the order was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an order from a Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassKycNotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity KYC in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassC5NotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_C5_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_ACTIVATION_ERROR&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity C5 activation/deactivation in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IrasSendingNotificationRO&lt;/td&gt;&lt;td&gt;IRAS_DOCUMENT_SENT&lt;/br&gt;IRAS_DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer and you have indicated to our API to automatically report to IRAS via the HTTP header X-C5-REPORTING.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.NotificationsResponseRO"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.NotificationsResponseRO?> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder.NotificationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.NotificationsResponseRO> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder.NotificationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.NotificationsResponseRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.NotificationsResponseRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The API creates notifications to inform you when a document was sent successfully or when you receive a document from other legal entities.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are sending an invoice/credit note to a Buyer. You will get notified via the notification `InvoiceSendingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QUEUED&lt;/td&gt;&lt;td&gt;Waiting to be sent to the Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SENT&lt;/td&gt;&lt;td&gt;Acknowledged by the receiver Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SEND_FAILED&lt;/td&gt;&lt;td&gt;Failed to send to the receiver&apos;s Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, have sent an invoice/credit note to the Access Point of the Buyer and it was received. You will get notified via the notification `MLRReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TECHNICAL_ACCEPTANCE&lt;/td&gt;&lt;td&gt;Document received and accepted by the Access Point of the Buyer, but it was not (yet) read by Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;MLR reject. Status is used when the Access Point of the Buyer will not process the referenced document any further due to validation errors.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;When you, acting as a Buyer, are receiving an invoice/credit note from the Seller you will get notified via the notification `InvoiceReceivingNotificationRO`. This notification contains a unique identifier called `transmissionId` which you will use to get the incoming invoice/credit note using the endpoint &lt;a href=&quot;#tag/InvoiceCredit-Note/operation/getInvoiceInUBLFormat&quot;&gt;Get Invoice/Credit Note&lt;/a&gt;.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are receiving an InvoiceResponse notification(IR) from the Buyer. Not all Buyers are sending an InvoiceResponse.You will get notified via the notification `InvoiceResponseReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BUYER_ACKNOWLEDGE&lt;/td&gt;&lt;td&gt;Status is used when Buyer has received a readable invoice message that can be understood and submitted for processing by the Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IN_PROCESS&lt;/td&gt;&lt;td&gt;Status is used when the processing of the Invoice has started in Buyers system.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UNDER_QUERY&lt;/td&gt;&lt;td&gt;Status is used when Buyer will not proceed to accept the Invoice without receiving additional information from the Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CONDITIONALLY_ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used when Buyer is accepting the Invoice under conditions stated in &apos;Status Reason&apos; and proceed to pay accordingly unless disputed by Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;Invoice reject. Status is used only when the Buyer will not process the referenced Invoice any further. Buyer is rejecting this invoice but not necessarily the commercial transaction. Although it can be used also for rejection for commercial reasons (invoice not corresponding to delivery).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has given a final approval of the invoice and the next step is payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PARTIALLY_PAID&lt;/td&gt;&lt;td&gt;Status is used together with Clarification Reason code PPD, only when the Buyer has initiated the payment of the invoice without having paid the accepted amount in full.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FULLY_PAID&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has initiated the payment of the invoice.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;Here is a list of all notifications defined in our OpenAPI specifications that you can receive:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Event Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer. This notifies you whether the invoice was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, receive an invoice/credit note from a Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MLRReceivingNotificationRO&lt;/td&gt;&lt;td&gt;MLR_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, have sent an invoice/credit note to the Buyer&apos;s Access Point and it has been received. This notifies you whether the Buyer&apos;s Access Point has accepted or rejected the invoice for technical reasons.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseSendingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_SENT&lt;/br&gt;INVOICE_RESPONSE_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an Invoice Response (IR) to a Seller. This notifies you whether the Invoice Response was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseReceivingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an Invoice Response (IR) from a Buyer. This notifies you whether the invoice you sent to the Buyer was accepted, rejected, paid, etc.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an order to a Seller. This notifies you whether the order was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an order from a Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassKycNotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity KYC in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassC5NotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_C5_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_ACTIVATION_ERROR&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity C5 activation/deactivation in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IrasSendingNotificationRO&lt;/td&gt;&lt;td&gt;IRAS_DOCUMENT_SENT&lt;/br&gt;IRAS_DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer and you have indicated to our API to automatically report to IRAS via the HTTP header X-C5-REPORTING.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder.NotificationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder.NotificationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The API creates notifications to inform you when a document was sent successfully or when you receive a document from other legal entities.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are sending an invoice/credit note to a Buyer. You will get notified via the notification `InvoiceSendingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QUEUED&lt;/td&gt;&lt;td&gt;Waiting to be sent to the Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SENT&lt;/td&gt;&lt;td&gt;Acknowledged by the receiver Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SEND_FAILED&lt;/td&gt;&lt;td&gt;Failed to send to the receiver&apos;s Access Point C3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, have sent an invoice/credit note to the Access Point of the Buyer and it was received. You will get notified via the notification `MLRReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TECHNICAL_ACCEPTANCE&lt;/td&gt;&lt;td&gt;Document received and accepted by the Access Point of the Buyer, but it was not (yet) read by Buyer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;MLR reject. Status is used when the Access Point of the Buyer will not process the referenced document any further due to validation errors.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;When you, acting as a Buyer, are receiving an invoice/credit note from the Seller you will get notified via the notification `InvoiceReceivingNotificationRO`. This notification contains a unique identifier called `transmissionId` which you will use to get the incoming invoice/credit note using the endpoint &lt;a href=&quot;#tag/InvoiceCredit-Note/operation/getInvoiceInUBLFormat&quot;&gt;Get Invoice/Credit Note&lt;/a&gt;.&lt;/br&gt;&lt;/br&gt;The following status values are possible when you, acting as a Seller, are receiving an InvoiceResponse notification(IR) from the Buyer. Not all Buyers are sending an InvoiceResponse.You will get notified via the notification `InvoiceResponseReceivingNotificationRO`:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BUYER_ACKNOWLEDGE&lt;/td&gt;&lt;td&gt;Status is used when Buyer has received a readable invoice message that can be understood and submitted for processing by the Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IN_PROCESS&lt;/td&gt;&lt;td&gt;Status is used when the processing of the Invoice has started in Buyers system.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UNDER_QUERY&lt;/td&gt;&lt;td&gt;Status is used when Buyer will not proceed to accept the Invoice without receiving additional information from the Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CONDITIONALLY_ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used when Buyer is accepting the Invoice under conditions stated in &apos;Status Reason&apos; and proceed to pay accordingly unless disputed by Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REJECTED&lt;/td&gt;&lt;td&gt;Invoice reject. Status is used only when the Buyer will not process the referenced Invoice any further. Buyer is rejecting this invoice but not necessarily the commercial transaction. Although it can be used also for rejection for commercial reasons (invoice not corresponding to delivery).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ACCEPTED&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has given a final approval of the invoice and the next step is payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PARTIALLY_PAID&lt;/td&gt;&lt;td&gt;Status is used together with Clarification Reason code PPD, only when the Buyer has initiated the payment of the invoice without having paid the accepted amount in full.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FULLY_PAID&lt;/td&gt;&lt;td&gt;Status is used only when the Buyer has initiated the payment of the invoice.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;Here is a list of all notifications defined in our OpenAPI specifications that you can receive:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Event Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer. This notifies you whether the invoice was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, receive an invoice/credit note from a Seller.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MLRReceivingNotificationRO&lt;/td&gt;&lt;td&gt;MLR_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, have sent an invoice/credit note to the Buyer&apos;s Access Point and it has been received. This notifies you whether the Buyer&apos;s Access Point has accepted or rejected the invoice for technical reasons.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseSendingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_SENT&lt;/br&gt;INVOICE_RESPONSE_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an Invoice Response (IR) to a Seller. This notifies you whether the Invoice Response was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InvoiceResponseReceivingNotificationRO&lt;/td&gt;&lt;td&gt;INVOICE_RESPONSE_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an Invoice Response (IR) from a Buyer. This notifies you whether the invoice you sent to the Buyer was accepted, rejected, paid, etc.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderSendingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_SENT&lt;/br&gt;DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Buyer, send an order to a Seller. This notifies you whether the order was sent successfully or failed to be sent.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OrderReceivingNotificationRO&lt;/td&gt;&lt;td&gt;DOCUMENT_RECEIVED&lt;/td&gt;&lt;td&gt;Notification created when you, acting as a Seller, receive an order from a Buyer.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassKycNotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_KYC_CORPPASS_ACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity KYC in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LegalEntityCorppassC5NotificationRO&lt;/td&gt;&lt;td&gt;LEGAL_ENTITY_C5_ACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_ACTIVATION_ERROR&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATED&lt;/br&gt;LEGAL_ENTITY_C5_DEACTIVATION_ERROR&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created to inform you about the status of the legal entity C5 activation/deactivation in Corppass.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IrasSendingNotificationRO&lt;/td&gt;&lt;td&gt;IRAS_DOCUMENT_SENT&lt;/br&gt;IRAS_DOCUMENT_SEND_FAILED&lt;/td&gt;&lt;td&gt;Specific to Singapore only: Notification created when you, acting as a Seller, send an invoice/credit note to a Buyer and you have indicated to our API to automatically report to IRAS via the HTTP header X-C5-REPORTING.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NotificationsRequestBuilderGetQueryParameters 
        {
            /// <summary>The document id of a document eg Invoice/Credit Note</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("documentId")]
            public string? DocumentId { get; set; }
#nullable restore
#else
            [QueryParameter("documentId")]
            public string DocumentId { get; set; }
#endif
            /// <summary>The end date time of the period to filter the notifications.</summary>
            [QueryParameter("endDateTime")]
            public DateTimeOffset? EndDateTime { get; set; }
            /// <summary>The notification event type</summary>
            [Obsolete("This property is deprecated, use EventTypeAsEventTypeRO instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eventType")]
            public string? EventType { get; set; }
#nullable restore
#else
            [QueryParameter("eventType")]
            public string EventType { get; set; }
#endif
            /// <summary>The notification event type</summary>
            [QueryParameter("eventType")]
            public global::Peppol.Ademico.Kiota.Models.EventTypeRO? EventTypeAsEventTypeRO { get; set; }
            /// <summary>The starting page number from which we want to retrieve results. The first page is 0.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>How many results we retrieve per page</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
            /// <summary>The document type: INVOICE, CREDIT_NOTE, ORDER</summary>
            [Obsolete("This property is deprecated, use PeppolDocumentTypeAsPeppolDocumentTypeRO instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolDocumentType")]
            public string? PeppolDocumentType { get; set; }
#nullable restore
#else
            [QueryParameter("peppolDocumentType")]
            public string PeppolDocumentType { get; set; }
#endif
            /// <summary>The document type: INVOICE, CREDIT_NOTE, ORDER</summary>
            [QueryParameter("peppolDocumentType")]
            public global::Peppol.Ademico.Kiota.Models.PeppolDocumentTypeRO? PeppolDocumentTypeAsPeppolDocumentTypeRO { get; set; }
            /// <summary>The receiver of the notification</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("receiver")]
            public string? Receiver { get; set; }
#nullable restore
#else
            [QueryParameter("receiver")]
            public string Receiver { get; set; }
#endif
            /// <summary>The sender of the notification</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sender")]
            public string? Sender { get; set; }
#nullable restore
#else
            [QueryParameter("sender")]
            public string Sender { get; set; }
#endif
            /// <summary>The start date time of the period to filter the notifications. To filter all notifications for a specific time E.g. `2023-07-25T11:03:26.688Z` use `startDateTime=2023-07-25T11:03:26.688Z` and `endDateTime=2023-07-29T11:03:26.688Z</summary>
            [QueryParameter("startDateTime")]
            public DateTimeOffset? StartDateTime { get; set; }
            /// <summary>The transmission id of the notification</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("transmissionId")]
            public string? TransmissionId { get; set; }
#nullable restore
#else
            [QueryParameter("transmissionId")]
            public string TransmissionId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NotificationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.Notifications.NotificationsRequestBuilder.NotificationsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
