// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item;
using Peppol.Ademico.Kiota.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities
{
    /// <summary>
    /// Builds and executes requests for operations under \api\peppol\v1\legal-entities
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LegalEntitiesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.legalEntities.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder"/></returns>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("legalEntityId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.legalEntities.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("legalEntityId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LegalEntitiesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities{?country*,legalEntityId*,name*,page*,pageSize*,peppolRegistrationIdentifier*,peppolRegistrationScheme*,peppolSupportedDocument*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LegalEntitiesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities{?country*,legalEntityId*,name*,page*,pageSize*,peppolRegistrationIdentifier*,peppolRegistrationScheme*,peppolSupportedDocument*}", rawUrl)
        {
        }
        /// <summary>
        /// Get the list of the legal entities including the Peppol registrations(Peppol identifiers and supported documents)
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityListRO"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityListRO?> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder.LegalEntitiesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityListRO> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder.LegalEntitiesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.LegalEntityListRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.LegalEntityListRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a legal entity and register it in the Peppol network. In the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; we explain in detail how to create your legal entity.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO"/></returns>
        /// <param name="body">The request to create a legal entity and optionally register it in the Peppol network</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO?> PostAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO> PostAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the list of the legal entities including the Peppol registrations(Peppol identifiers and supported documents)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder.LegalEntitiesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder.LegalEntitiesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a legal entity and register it in the Peppol network. In the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; we explain in detail how to create your legal entity.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request to create a legal entity and optionally register it in the Peppol network</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the list of the legal entities including the Peppol registrations(Peppol identifiers and supported documents)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LegalEntitiesRequestBuilderGetQueryParameters 
        {
            /// <summary>The legal entity country</summary>
            [Obsolete("This property is deprecated, use CountryAsCountryCodeEnum instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("country")]
            public string? Country { get; set; }
#nullable restore
#else
            [QueryParameter("country")]
            public string Country { get; set; }
#endif
            /// <summary>The legal entity country</summary>
            [QueryParameter("country")]
            public global::Peppol.Ademico.Kiota.Models.CountryCodeEnum? CountryAsCountryCodeEnum { get; set; }
            /// <summary>The legal entity identifier</summary>
            [QueryParameter("legalEntityId")]
            public long? LegalEntityId { get; set; }
            /// <summary>The legal entity name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>The starting page number from which we want to retrieve results. The first page is 0.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>How many results we retrieve per page</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
            /// <summary>The Peppol identifier of the legal entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolRegistrationIdentifier")]
            public string? PeppolRegistrationIdentifier { get; set; }
#nullable restore
#else
            [QueryParameter("peppolRegistrationIdentifier")]
            public string PeppolRegistrationIdentifier { get; set; }
#endif
            /// <summary>The Peppol identifier scheme of the legal entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolRegistrationScheme")]
            public string? PeppolRegistrationScheme { get; set; }
#nullable restore
#else
            [QueryParameter("peppolRegistrationScheme")]
            public string PeppolRegistrationScheme { get; set; }
#endif
            /// <summary>The document that can be received by the legal entity in the Peppol network</summary>
            [Obsolete("This property is deprecated, use PeppolSupportedDocumentAsPeppolDocumentSchemeEnumRO instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolSupportedDocument")]
            public string? PeppolSupportedDocument { get; set; }
#nullable restore
#else
            [QueryParameter("peppolSupportedDocument")]
            public string PeppolSupportedDocument { get; set; }
#endif
            /// <summary>The document that can be received by the legal entity in the Peppol network</summary>
            [QueryParameter("peppolSupportedDocument")]
            public global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO? PeppolSupportedDocumentAsPeppolDocumentSchemeEnumRO { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LegalEntitiesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.LegalEntitiesRequestBuilder.LegalEntitiesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LegalEntitiesRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
