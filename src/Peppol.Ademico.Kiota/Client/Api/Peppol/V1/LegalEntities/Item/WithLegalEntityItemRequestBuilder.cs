// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations;
using Peppol.Ademico.Kiota.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \api\peppol\v1\legal-entities\{legalEntityId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithLegalEntityItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The peppolRegistrations property</summary>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder PeppolRegistrations
        {
            get => new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLegalEntityItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLegalEntityItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}", rawUrl)
        {
        }
        /// <summary>
        /// Delete a legal entity from the Peppol network(SML/SMP) and from the &lt;a href=&quot;https://directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;Peppol Directory&lt;/a&gt;. For the TEST environment the legal entity is deleted from the &lt;a href=&quot;https://test-directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;TEST Peppol Directory&lt;/a&gt;. &lt;/br&gt;&lt;/br&gt;The legal entity cannot be deleted if it has already sent or received documents in the Peppol network.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a legal entity and publish it(optionally) in the &lt;a href=&quot;https://directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;Peppol Directory&lt;/a&gt;. For the TEST environment the legal entity is published in &lt;a href=&quot;https://test-directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;TEST Peppol Directory&lt;/a&gt; &lt;/br&gt;&lt;/br&gt;Set the flag `publishInPeppolDirectory` to false if you don&apos;t want to publish the legal entity details in the Peppol Directory. &lt;/br&gt;
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The details needed to update a legal entity</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PutAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PutAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a legal entity from the Peppol network(SML/SMP) and from the &lt;a href=&quot;https://directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;Peppol Directory&lt;/a&gt;. For the TEST environment the legal entity is deleted from the &lt;a href=&quot;https://test-directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;TEST Peppol Directory&lt;/a&gt;. &lt;/br&gt;&lt;/br&gt;The legal entity cannot be deleted if it has already sent or received documents in the Peppol network.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a legal entity and publish it(optionally) in the &lt;a href=&quot;https://directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;Peppol Directory&lt;/a&gt;. For the TEST environment the legal entity is published in &lt;a href=&quot;https://test-directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;TEST Peppol Directory&lt;/a&gt; &lt;/br&gt;&lt;/br&gt;Set the flag `publishInPeppolDirectory` to false if you don&apos;t want to publish the legal entity details in the Peppol Directory. &lt;/br&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The details needed to update a legal entity</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.WithLegalEntityItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLegalEntityItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLegalEntityItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
