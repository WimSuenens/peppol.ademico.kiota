// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Peppol.Ademico.Kiota.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \api\peppol\v1\legal-entities\{legalEntityId}\peppol-registrations\{peppolRegistrationId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithPeppolRegistrationItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPeppolRegistrationItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}/peppol-registrations/{peppolRegistrationId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPeppolRegistrationItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}/peppol-registrations/{peppolRegistrationId}", rawUrl)
        {
        }
        /// <summary>
        /// Delete a Peppol registration for a legal entity. The Peppol registration of the legal entity will be also deleted from the Peppol network(SML/SMP). 
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a Peppol registration for a legal entity(for instance to update the supported documents). You can have a look in the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; for more details.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO"/></returns>
        /// <param name="body">The Peppol registration update details</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO?> PutAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO> PutAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.LegalEntityCreateResponseRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Peppol registration for a legal entity. The Peppol registration of the legal entity will be also deleted from the Peppol network(SML/SMP). 
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a Peppol registration for a legal entity(for instance to update the supported documents). You can have a look in the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; for more details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The Peppol registration update details</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationUpdateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPeppolRegistrationItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPeppolRegistrationItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
