// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item;
using Peppol.Ademico.Kiota.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations
{
    /// <summary>
    /// Builds and executes requests for operations under \api\peppol\v1\legal-entities\{legalEntityId}\peppol-registrations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PeppolRegistrationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.legalEntities.item.peppolRegistrations.item collection</summary>
        /// <param name="position">The id of the Peppol registration you want to update</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder"/></returns>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("peppolRegistrationId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Peppol.Ademico.Kiota.api.peppol.v1.legalEntities.item.peppolRegistrations.item collection</summary>
        /// <param name="position">The id of the Peppol registration you want to update</param>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("peppolRegistrationId", position);
                return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.Item.WithPeppolRegistrationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PeppolRegistrationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}/peppol-registrations{?page*,pageSize*,peppolRegistrationId*,peppolRegistrationIdentifier*,peppolRegistrationScheme*,peppolSupportedDocument*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PeppolRegistrationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/peppol/v1/legal-entities/{legalEntityId}/peppol-registrations{?page*,pageSize*,peppolRegistrationId*,peppolRegistrationIdentifier*,peppolRegistrationScheme*,peppolSupportedDocument*}", rawUrl)
        {
        }
        /// <summary>
        /// You get a list of Peppol registrations with the following details:&lt;ul&gt;&lt;li&gt;The scheme and identifier of the legal entity in the Peppol network eg 0208:0552912569&lt;/li&gt;&lt;li&gt;The list of Peppol supported documents the legal entity can send and receive eg PEPPOL_BIS_BILLING_UBL_INVOICE_V3&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationListRO"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationListRO?> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder.PeppolRegistrationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationListRO> GetAsync(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder.PeppolRegistrationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationListRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationListRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Register a legal entity as a participant in the Peppol network. You can have a look in the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; for more details.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateResponseRO"/></returns>
        /// <param name="body">The details needed to register a legal entity in the Peppol network</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 400 status code</exception>
        /// <exception cref="global::Peppol.Ademico.Kiota.Models.ApplicationMessage">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateResponseRO?> PostAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateResponseRO> PostAsync(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
                { "401", global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateResponseRO>(requestInfo, global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateResponseRO.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// You get a list of Peppol registrations with the following details:&lt;ul&gt;&lt;li&gt;The scheme and identifier of the legal entity in the Peppol network eg 0208:0552912569&lt;/li&gt;&lt;li&gt;The list of Peppol supported documents the legal entity can send and receive eg PEPPOL_BIS_BILLING_UBL_INVOICE_V3&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder.PeppolRegistrationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder.PeppolRegistrationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Register a legal entity as a participant in the Peppol network. You can have a look in the section &lt;a href=&quot;#section/Getting-started/Register-your-legal-entity-as-a-participant-in-the-Peppol-network&quot;&gt;Register your legal entity as a participant in the Peppol network&lt;/a&gt; for more details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The details needed to register a legal entity in the Peppol network</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationCreateRequestRO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// You get a list of Peppol registrations with the following details:&lt;ul&gt;&lt;li&gt;The scheme and identifier of the legal entity in the Peppol network eg 0208:0552912569&lt;/li&gt;&lt;li&gt;The list of Peppol supported documents the legal entity can send and receive eg PEPPOL_BIS_BILLING_UBL_INVOICE_V3&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PeppolRegistrationsRequestBuilderGetQueryParameters 
        {
            /// <summary>The starting page number from which we want to retrieve results. The first page is 0.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>How many results we retrieve per page</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
            /// <summary>The id of the Peppol registration</summary>
            [QueryParameter("peppolRegistrationId")]
            public long? PeppolRegistrationId { get; set; }
            /// <summary>The Peppol identifier of the legal entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolRegistrationIdentifier")]
            public string? PeppolRegistrationIdentifier { get; set; }
#nullable restore
#else
            [QueryParameter("peppolRegistrationIdentifier")]
            public string PeppolRegistrationIdentifier { get; set; }
#endif
            /// <summary>The Peppol identifier scheme of the legal entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolRegistrationScheme")]
            public string? PeppolRegistrationScheme { get; set; }
#nullable restore
#else
            [QueryParameter("peppolRegistrationScheme")]
            public string PeppolRegistrationScheme { get; set; }
#endif
            /// <summary>The document that can be received by the legal entity in the Peppol network</summary>
            [Obsolete("This property is deprecated, use PeppolSupportedDocumentAsPeppolDocumentSchemeEnumRO instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("peppolSupportedDocument")]
            public string? PeppolSupportedDocument { get; set; }
#nullable restore
#else
            [QueryParameter("peppolSupportedDocument")]
            public string PeppolSupportedDocument { get; set; }
#endif
            /// <summary>The document that can be received by the legal entity in the Peppol network</summary>
            [QueryParameter("peppolSupportedDocument")]
            public global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO? PeppolSupportedDocumentAsPeppolDocumentSchemeEnumRO { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PeppolRegistrationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Peppol.Ademico.Kiota.Api.Peppol.V1.LegalEntities.Item.PeppolRegistrations.PeppolRegistrationsRequestBuilder.PeppolRegistrationsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PeppolRegistrationsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
