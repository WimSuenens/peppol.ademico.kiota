// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// The details of the legal entity which is registered in the Peppol network
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LegalEntityDetailsRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Any additional information relevant to the legal entity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdditionalInformation { get; set; }
#nullable restore
#else
        public string AdditionalInformation { get; set; }
#endif
        /// <summary>The list of contacts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.LegalEntityContactRO>? Contacts { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.LegalEntityContactRO> Contacts { get; set; }
#endif
        /// <summary>The country in which the legal entity is registered</summary>
        public global::Peppol.Ademico.Kiota.Models.CountryCodeEnumRO? CountryCode { get; set; }
        /// <summary>The legal entity&apos;s address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GeographicalInformation { get; set; }
#nullable restore
#else
        public string GeographicalInformation { get; set; }
#endif
        /// <summary>The legal entity name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The legal entity&apos;s Peppol additional identifiers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO>? PeppolAdditionalIdentifiers { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO> PeppolAdditionalIdentifiers { get; set; }
#endif
        /// <summary>True if the legal entity details are published in the &lt;a href=&quot;https://directory.peppol.eu/public&quot; target=&quot;_blank&quot;&gt;Peppol Directory&lt;/a&gt;</summary>
        public bool? PublishInPeppolDirectory { get; set; }
        /// <summary>The date when the legal entity was registered in the Peppol network</summary>
        public DateTimeOffset? RegistrationDate { get; set; }
        /// <summary>The legal entity&apos;s website</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebsiteURL { get; set; }
#nullable restore
#else
        public string WebsiteURL { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityDetailsRO"/> and sets the default values.
        /// </summary>
        public LegalEntityDetailsRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityDetailsRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.LegalEntityDetailsRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.LegalEntityDetailsRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additionalInformation", n => { AdditionalInformation = n.GetStringValue(); } },
                { "contacts", n => { Contacts = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.LegalEntityContactRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityContactRO.CreateFromDiscriminatorValue)?.AsList(); } },
                { "countryCode", n => { CountryCode = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.CountryCodeEnumRO>(); } },
                { "geographicalInformation", n => { GeographicalInformation = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "peppolAdditionalIdentifiers", n => { PeppolAdditionalIdentifiers = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO.CreateFromDiscriminatorValue)?.AsList(); } },
                { "publishInPeppolDirectory", n => { PublishInPeppolDirectory = n.GetBoolValue(); } },
                { "registrationDate", n => { RegistrationDate = n.GetDateTimeOffsetValue(); } },
                { "websiteURL", n => { WebsiteURL = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("additionalInformation", AdditionalInformation);
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.LegalEntityContactRO>("contacts", Contacts);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.CountryCodeEnumRO>("countryCode", CountryCode);
            writer.WriteStringValue("geographicalInformation", GeographicalInformation);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO>("peppolAdditionalIdentifiers", PeppolAdditionalIdentifiers);
            writer.WriteBoolValue("publishInPeppolDirectory", PublishInPeppolDirectory);
            writer.WriteDateTimeOffsetValue("registrationDate", RegistrationDate);
            writer.WriteStringValue("websiteURL", WebsiteURL);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
