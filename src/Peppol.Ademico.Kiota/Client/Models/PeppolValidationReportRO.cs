// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PeppolValidationReportRO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The errorsCount property</summary>
        public int? ErrorsCount { get; set; }
        /// <summary>The globalStatus property</summary>
        public global::Peppol.Ademico.Kiota.Models.ValidationReportStatus? GlobalStatus { get; set; }
        /// <summary>The schematronValidationReport property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.SchematronValidationReportRO>? SchematronValidationReport { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.SchematronValidationReportRO> SchematronValidationReport { get; set; }
#endif
        /// <summary>The validatedXmlName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValidatedXmlName { get; set; }
#nullable restore
#else
        public string ValidatedXmlName { get; set; }
#endif
        /// <summary>The warningsCount property</summary>
        public int? WarningsCount { get; set; }
        /// <summary>The xmlContent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XmlContent { get; set; }
#nullable restore
#else
        public string XmlContent { get; set; }
#endif
        /// <summary>The xmlValidationReport property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.XmlValidationReportRO? XmlValidationReport { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.XmlValidationReportRO XmlValidationReport { get; set; }
#endif
        /// <summary>The xsdValidationReport property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.XsdValidationReportRO? XsdValidationReport { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.XsdValidationReportRO XsdValidationReport { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.PeppolValidationReportRO"/> and sets the default values.
        /// </summary>
        public PeppolValidationReportRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.PeppolValidationReportRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.PeppolValidationReportRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.PeppolValidationReportRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "errorsCount", n => { ErrorsCount = n.GetIntValue(); } },
                { "globalStatus", n => { GlobalStatus = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.ValidationReportStatus>(); } },
                { "schematronValidationReport", n => { SchematronValidationReport = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.SchematronValidationReportRO>(global::Peppol.Ademico.Kiota.Models.SchematronValidationReportRO.CreateFromDiscriminatorValue)?.AsList(); } },
                { "validatedXmlName", n => { ValidatedXmlName = n.GetStringValue(); } },
                { "warningsCount", n => { WarningsCount = n.GetIntValue(); } },
                { "xmlContent", n => { XmlContent = n.GetStringValue(); } },
                { "xmlValidationReport", n => { XmlValidationReport = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.XmlValidationReportRO>(global::Peppol.Ademico.Kiota.Models.XmlValidationReportRO.CreateFromDiscriminatorValue); } },
                { "xsdValidationReport", n => { XsdValidationReport = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.XsdValidationReportRO>(global::Peppol.Ademico.Kiota.Models.XsdValidationReportRO.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("errorsCount", ErrorsCount);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.ValidationReportStatus>("globalStatus", GlobalStatus);
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.SchematronValidationReportRO>("schematronValidationReport", SchematronValidationReport);
            writer.WriteStringValue("validatedXmlName", ValidatedXmlName);
            writer.WriteIntValue("warningsCount", WarningsCount);
            writer.WriteStringValue("xmlContent", XmlContent);
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.XmlValidationReportRO>("xmlValidationReport", XmlValidationReport);
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.XsdValidationReportRO>("xsdValidationReport", XsdValidationReport);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
