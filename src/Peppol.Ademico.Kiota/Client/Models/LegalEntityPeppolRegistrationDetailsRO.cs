// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// The details of the Peppol registration: legal entity scheme and unique identifier and the supported Peppol documents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LegalEntityPeppolRegistrationDetailsRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The legal entity identifier is composed of the peppol registration scheme and it&apos;s unique identifier eg company registration number. You can have a look for more details in section &lt;a href=&quot;#section/Glossary/Participant-scheme-and-identifier&quot;&gt;Participant scheme and identifier&lt;/a&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO? PeppolIdentifier { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO PeppolIdentifier { get; set; }
#endif
        /// <summary>True if you want to register the legal entity in the Peppol network(SML/SMP). Set this flag to false if the legal entity was registered in the Peppol network (SML/SMP) using other methods than our API. In this case you will only be able to send documents but not to receive.</summary>
        public bool? PeppolRegistration { get; set; }
        /// <summary>The list of supported documents the legal entity can receive. You can have a look for more details in section &lt;a href=&quot;#section/Supported-Peppol-documents&quot;&gt;Supported Peppol documents&lt;/a&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO?>? SupportedDocuments { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO?> SupportedDocuments { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO"/> and sets the default values.
        /// </summary>
        public LegalEntityPeppolRegistrationDetailsRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "peppolIdentifier", n => { PeppolIdentifier = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO.CreateFromDiscriminatorValue); } },
                { "peppolRegistration", n => { PeppolRegistration = n.GetBoolValue(); } },
                { "supportedDocuments", n => { SupportedDocuments = n.GetCollectionOfEnumValues<global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityIdentifierRO>("peppolIdentifier", PeppolIdentifier);
            writer.WriteBoolValue("peppolRegistration", PeppolRegistration);
            writer.WriteCollectionOfEnumValues<global::Peppol.Ademico.Kiota.Models.PeppolDocumentSchemeEnumRO>("supportedDocuments", SupportedDocuments);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
