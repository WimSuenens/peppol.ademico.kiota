// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// The registrations details of the legal entity in the Peppol network. A registration contains the Peppol identifier and the legal entity supported documents. &lt;/br&gt;A legal entity can be registered multiple times using different identifiers eg company registration number, VAT, etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LegalEntityPeppolRegistrationRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The C5 details of the Peppol legal entity registration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationC5DetailsRO? C5Details { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationC5DetailsRO C5Details { get; set; }
#endif
        /// <summary>The KYC details of the Peppol legal entity registration. It is used only in specific country eg Singapore, Malaysia</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationKycDetailsRO? KycDetails { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationKycDetailsRO KycDetails { get; set; }
#endif
        /// <summary>The details of the Peppol registration: legal entity scheme and unique identifier and the supported Peppol documents</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO? PeppolRegistrationDetails { get; set; }
#nullable restore
#else
        public global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO PeppolRegistrationDetails { get; set; }
#endif
        /// <summary>The Peppol registration id</summary>
        public long? PeppolRegistrationId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationRO"/> and sets the default values.
        /// </summary>
        public LegalEntityPeppolRegistrationRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "c5Details", n => { C5Details = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationC5DetailsRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationC5DetailsRO.CreateFromDiscriminatorValue); } },
                { "kycDetails", n => { KycDetails = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationKycDetailsRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationKycDetailsRO.CreateFromDiscriminatorValue); } },
                { "peppolRegistrationDetails", n => { PeppolRegistrationDetails = n.GetObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO>(global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO.CreateFromDiscriminatorValue); } },
                { "peppolRegistrationId", n => { PeppolRegistrationId = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationC5DetailsRO>("c5Details", C5Details);
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationKycDetailsRO>("kycDetails", KycDetails);
            writer.WriteObjectValue<global::Peppol.Ademico.Kiota.Models.LegalEntityPeppolRegistrationDetailsRO>("peppolRegistrationDetails", PeppolRegistrationDetails);
            writer.WriteLongValue("peppolRegistrationId", PeppolRegistrationId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
