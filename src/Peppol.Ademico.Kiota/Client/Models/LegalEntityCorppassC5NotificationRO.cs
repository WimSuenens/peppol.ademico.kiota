// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// The details of the Corppass C5 notification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LegalEntityCorppassC5NotificationRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>The date when the Corppass activation was completed</summary>
        public DateTimeOffset? ActivationDate { get; set; }
        /// <summary>The date when the Corppass activation failed</summary>
        public DateTimeOffset? ActivationErrorDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Additional details regarding the notification</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>? Details { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.ApplicationMessage> Details { get; set; }
#endif
        /// <summary>The event type</summary>
        public global::Peppol.Ademico.Kiota.Models.EventTypeRO? EventType { get; set; }
        /// <summary>The date when the Corppass activation was initiated</summary>
        public DateTimeOffset? InitiatedDate { get; set; }
        /// <summary>The legal entity id for which the Corppass C5 was performed</summary>
        public long? LegalEntityId { get; set; }
        /// <summary>The legal entity Peppol registration id for which the Corppass C5 was performed</summary>
        public long? LegalEntityRegistrationId { get; set; }
        /// <summary>The date when the notification was created</summary>
        public DateTimeOffset? NotificationDate { get; set; }
        /// <summary>The notification id</summary>
        public long? NotificationId { get; set; }
        /// <summary>The email address of the person who signs the Peppol registration C5 in Corppass</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SignerEmail { get; set; }
#nullable restore
#else
        public string SignerEmail { get; set; }
#endif
        /// <summary>The name of the person who signs the Peppol registration C5 in Corppass</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SignerName { get; set; }
#nullable restore
#else
        public string SignerName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityCorppassC5NotificationRO"/> and sets the default values.
        /// </summary>
        public LegalEntityCorppassC5NotificationRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.LegalEntityCorppassC5NotificationRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.LegalEntityCorppassC5NotificationRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.LegalEntityCorppassC5NotificationRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activationDate", n => { ActivationDate = n.GetDateTimeOffsetValue(); } },
                { "activationErrorDate", n => { ActivationErrorDate = n.GetDateTimeOffsetValue(); } },
                { "details", n => { Details = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>(global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "eventType", n => { EventType = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.EventTypeRO>(); } },
                { "initiatedDate", n => { InitiatedDate = n.GetDateTimeOffsetValue(); } },
                { "legalEntityId", n => { LegalEntityId = n.GetLongValue(); } },
                { "legalEntityRegistrationId", n => { LegalEntityRegistrationId = n.GetLongValue(); } },
                { "notificationDate", n => { NotificationDate = n.GetDateTimeOffsetValue(); } },
                { "notificationId", n => { NotificationId = n.GetLongValue(); } },
                { "signerEmail", n => { SignerEmail = n.GetStringValue(); } },
                { "signerName", n => { SignerName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("activationDate", ActivationDate);
            writer.WriteDateTimeOffsetValue("activationErrorDate", ActivationErrorDate);
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>("details", Details);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.EventTypeRO>("eventType", EventType);
            writer.WriteDateTimeOffsetValue("initiatedDate", InitiatedDate);
            writer.WriteLongValue("legalEntityId", LegalEntityId);
            writer.WriteLongValue("legalEntityRegistrationId", LegalEntityRegistrationId);
            writer.WriteDateTimeOffsetValue("notificationDate", NotificationDate);
            writer.WriteLongValue("notificationId", NotificationId);
            writer.WriteStringValue("signerEmail", SignerEmail);
            writer.WriteStringValue("signerName", SignerName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
