// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SchematronValidationMessageRO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The columnNumber property</summary>
        public int? ColumnNumber { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The errorId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorId { get; set; }
#nullable restore
#else
        public string ErrorId { get; set; }
#endif
        /// <summary>The errorLevel property</summary>
        public global::Peppol.Ademico.Kiota.Models.ValidationErrorLevel? ErrorLevel { get; set; }
        /// <summary>The lineNumber property</summary>
        public int? LineNumber { get; set; }
        /// <summary>The schematronTest property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SchematronTest { get; set; }
#nullable restore
#else
        public string SchematronTest { get; set; }
#endif
        /// <summary>The xpath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Xpath { get; set; }
#nullable restore
#else
        public string Xpath { get; set; }
#endif
        /// <summary>The xpathWithoutNamespaces property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XpathWithoutNamespaces { get; set; }
#nullable restore
#else
        public string XpathWithoutNamespaces { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.SchematronValidationMessageRO"/> and sets the default values.
        /// </summary>
        public SchematronValidationMessageRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.SchematronValidationMessageRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.SchematronValidationMessageRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.SchematronValidationMessageRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "columnNumber", n => { ColumnNumber = n.GetIntValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "errorId", n => { ErrorId = n.GetStringValue(); } },
                { "errorLevel", n => { ErrorLevel = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.ValidationErrorLevel>(); } },
                { "lineNumber", n => { LineNumber = n.GetIntValue(); } },
                { "schematronTest", n => { SchematronTest = n.GetStringValue(); } },
                { "xpath", n => { Xpath = n.GetStringValue(); } },
                { "xpathWithoutNamespaces", n => { XpathWithoutNamespaces = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("columnNumber", ColumnNumber);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("errorId", ErrorId);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.ValidationErrorLevel>("errorLevel", ErrorLevel);
            writer.WriteIntValue("lineNumber", LineNumber);
            writer.WriteStringValue("schematronTest", SchematronTest);
            writer.WriteStringValue("xpath", Xpath);
            writer.WriteStringValue("xpathWithoutNamespaces", XpathWithoutNamespaces);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
