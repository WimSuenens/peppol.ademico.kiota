// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// The details of the Invoice Response sending notification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceResponseSendingNotificationRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Additional details regarding the notification</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>? Details { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.ApplicationMessage> Details { get; set; }
#endif
        /// <summary>The document id of the Invoice/Credit Note for which we have sent an Invoice Response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentId { get; set; }
#nullable restore
#else
        public string DocumentId { get; set; }
#endif
        /// <summary>The status of the Invoice/Credit Note for which we have sent an Invoice Response</summary>
        public global::Peppol.Ademico.Kiota.Models.DocumentStatusEnumRO? DocumentStatus { get; set; }
        /// <summary>The event type</summary>
        public global::Peppol.Ademico.Kiota.Models.EventTypeRO? EventType { get; set; }
        /// <summary>The date when the notification was created</summary>
        public DateTimeOffset? NotificationDate { get; set; }
        /// <summary>The notification id</summary>
        public long? NotificationId { get; set; }
        /// <summary>The receiver of the Invoice Response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Receiver { get; set; }
#nullable restore
#else
        public string Receiver { get; set; }
#endif
        /// <summary>The sender of the Invoice Response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sender { get; set; }
#nullable restore
#else
        public string Sender { get; set; }
#endif
        /// <summary>The transmission unique identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransmissionId { get; set; }
#nullable restore
#else
        public string TransmissionId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.InvoiceResponseSendingNotificationRO"/> and sets the default values.
        /// </summary>
        public InvoiceResponseSendingNotificationRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.InvoiceResponseSendingNotificationRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.InvoiceResponseSendingNotificationRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.InvoiceResponseSendingNotificationRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "details", n => { Details = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>(global::Peppol.Ademico.Kiota.Models.ApplicationMessage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "documentId", n => { DocumentId = n.GetStringValue(); } },
                { "documentStatus", n => { DocumentStatus = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.DocumentStatusEnumRO>(); } },
                { "eventType", n => { EventType = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.EventTypeRO>(); } },
                { "notificationDate", n => { NotificationDate = n.GetDateTimeOffsetValue(); } },
                { "notificationId", n => { NotificationId = n.GetLongValue(); } },
                { "receiver", n => { Receiver = n.GetStringValue(); } },
                { "sender", n => { Sender = n.GetStringValue(); } },
                { "transmissionId", n => { TransmissionId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.ApplicationMessage>("details", Details);
            writer.WriteStringValue("documentId", DocumentId);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.DocumentStatusEnumRO>("documentStatus", DocumentStatus);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.EventTypeRO>("eventType", EventType);
            writer.WriteDateTimeOffsetValue("notificationDate", NotificationDate);
            writer.WriteLongValue("notificationId", NotificationId);
            writer.WriteStringValue("receiver", Receiver);
            writer.WriteStringValue("sender", Sender);
            writer.WriteStringValue("transmissionId", TransmissionId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
