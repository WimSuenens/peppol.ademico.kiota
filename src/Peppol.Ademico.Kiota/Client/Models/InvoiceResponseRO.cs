// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Peppol.Ademico.Kiota.Models
{
    /// <summary>
    /// Contains the Invoice Response details
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceResponseRO : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date when the status became effective.</summary>
        public DateTimeOffset? EffectiveDate { get; set; }
        /// <summary>A list of clarifications to state the Buyer&apos;s reason for the status and/or any expected action from the Seller&apos;s side</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Peppol.Ademico.Kiota.Models.InvoiceClarificationRO>? InvoiceClarifications { get; set; }
#nullable restore
#else
        public List<global::Peppol.Ademico.Kiota.Models.InvoiceClarificationRO> InvoiceClarifications { get; set; }
#endif
        /// <summary>Invoice/Credit Note transmission id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceTransmissionId { get; set; }
#nullable restore
#else
        public string InvoiceTransmissionId { get; set; }
#endif
        /// <summary>A note providing more details for the Invoice Response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The Invoice Response status code</summary>
        public global::Peppol.Ademico.Kiota.Models.InvoiceResponseCodeEnumRO? ResponseCode { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Peppol.Ademico.Kiota.Models.InvoiceResponseRO"/> and sets the default values.
        /// </summary>
        public InvoiceResponseRO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Peppol.Ademico.Kiota.Models.InvoiceResponseRO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Peppol.Ademico.Kiota.Models.InvoiceResponseRO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Peppol.Ademico.Kiota.Models.InvoiceResponseRO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "effectiveDate", n => { EffectiveDate = n.GetDateTimeOffsetValue(); } },
                { "invoiceClarifications", n => { InvoiceClarifications = n.GetCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.InvoiceClarificationRO>(global::Peppol.Ademico.Kiota.Models.InvoiceClarificationRO.CreateFromDiscriminatorValue)?.AsList(); } },
                { "invoiceTransmissionId", n => { InvoiceTransmissionId = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "responseCode", n => { ResponseCode = n.GetEnumValue<global::Peppol.Ademico.Kiota.Models.InvoiceResponseCodeEnumRO>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("effectiveDate", EffectiveDate);
            writer.WriteCollectionOfObjectValues<global::Peppol.Ademico.Kiota.Models.InvoiceClarificationRO>("invoiceClarifications", InvoiceClarifications);
            writer.WriteStringValue("invoiceTransmissionId", InvoiceTransmissionId);
            writer.WriteStringValue("note", Note);
            writer.WriteEnumValue<global::Peppol.Ademico.Kiota.Models.InvoiceResponseCodeEnumRO>("responseCode", ResponseCode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
